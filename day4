'''
Given a list and chunk size "n", 
create a function such that it divides the list into many sublists where each sublist is of length size "n".
Examples
chunk([1, 2, 3, 4], 2) ➞ [[1, 2], [3, 4]]

chunk([1, 2, 3, 4, 5, 6, 7], 3) ➞ [[1, 2, 3], [4, 5, 6], [7]]

chunk([1, 2, 3, 4 ,5], 10) ➞ [[1, 2, 3, 4, 5]]

'''

def chunk(l,size):
    ans=[]
    for i in range(0,len(l),size):
        ans.append(l[i:i+size])
    return ans

print(chunk([1, 2, 3, 4, 5, 6, 7], 3))

#2
def chunk(l,size):
    return [l[i:i+size] for i in range(0,len(l),size)]

print(chunk([1, 2, 3, 4, 5, 6, 7], 3))
'''
Write a python program to find and display the product of three positive integer values based on the rule mentioned below:

It should display the product of the three values except when one of the integer value is 7. 
In that case, 7 should not be included in the product and the values to its left also should not be included.
If there is only one value to be considered, display that value itself. If no values can be included in the product, display -1.

Note: Assume that if 7 is one of the positive integer values, then it will occur only once. Refer the sample I/O given below.

Sample Input            Expected Output

1, 5, 3                  15

3, 7, 8                   8

7, 4, 3                  12

1, 5, 7                  -1
'''


def find_product(num1,num2,num3):
    l=[]
    l.extend([num1,num2,num3])
    product=1
    if 7 in l:
        i=l.index(7)
        if i is (len(l)-1):
            return -1
    else:
        i=-1
    for  index in range(i+1,len(l)):
        product=product*l[index]
    return product

product=find_product(7,6,2)
print(product)



'''
You have x no. of 5 rupee coins and y no. of 1 rupee coins. You want to purchase an item for amount z. 
The shopkeeper wants you to provide exact change. You want to pay using minimum number of coins. 
How many 5 rupee coins and 1 rupee coins will you use? If exact change is not possible then display -1.

Sample Input	                                                        Expected Output
Available Rs. 1 coins	Available Rs. 5 notes	Amount to be made	Rs. 1 coins needed	Rs. 5 notes needed
2	                        4	                     21	                     1	             4
11	                        2	                     11	                      1	            2
3	                        3	                     19	                     -1

'''

def make_amount(rupees_to_make,no_of_five,no_of_one):
    five_needed=0
    one_needed=0
    five_needed=int(rupees_to_make/5)
    one_needed=rupees_to_make%5
    if five_needed<=no_of_five and one_needed<=no_of_one:
        print("no of five:",five_needed)
        print("no of one: ",one_needed)
    elif five_needed>no_of_five:
        total=no_of_five*5
        one_needed=rupees_to_make-total
        if one_needed<=no_of_one:
            print('no of five: ',no_of_five)
            print("no of one:",one_needed)
        else:
            print(-1)
    else:
        print(-1)

make_amount(21,4,2)
make_amount(11,2,11)
make_amount(19,3,3)

'''
FoodCorner home delivers vegetarian and non-vegetarian combos to its customer based on order.

A vegetarian combo costs Rs.120 per plate and a non-vegetarian combo costs Rs.150 per plate. 
Their non-veg combo is really famous that they get more orders for their non-vegetarian combo than the vegetarian combo.

Apart from the cost per plate of food, customers are also charged for home delivery 
based on the distance in kms from the restaurant to the delivery point. 
The delivery charges are as mentioned below:

Distance in kms	                 Delivery charge in Rs per km

For first 3kms	                      0
For next 3kms	                      3
For the remaining	                   6

Given the type of food, quantity (no. of plates) and the distance in kms from the restaurant to the delivery point, 
write a python program to calculate the final bill amount to be paid by a customer. 

The below information must be used to check the validity of the data provided by the customer: 
Type of food must be ‘V’ for vegetarian and ‘N’ for non-vegetarian.
Distance in kms must be greater than 0.
Quantity ordered should be minimum 1.
If any of the input is invalid, the bill amount should be considered as -1.

'''
def bill(food_type,quantity,distance):
    bill_amount=0
    delivery_charge=0
    if food_type=="V" or food_type=="N":
        if quantity>=1 and distance>0:
            if food_type=="V":
                bill_amount=quantity*120
            elif food_type=="N":
                bill_amount=quantity*150
            if distance>3 and distance<=6:
                delivery_charge=delivery_charge+(distance-3)*3
            elif distance>6:
                delivery_charge=delivery_charge+9+(distance-6)*6
            bill_amount=bill_amount+delivery_charge
            print(bill_amount)
        else:
            print(-1)
    else:
        print(-1)

bill("N",2,4)

'''
Create a function that takes an integer list and return the biggest between positive sum, negative sum, or 0s count. 
The major is understood as the greatest absolute.
l = [1,2,3,4,0,0,-3,-2], the function has to return 10, because:
•	Positive sum = 1+2+3+4 = 10
•	Negative sum = (-3)+(-2) = -5
•	0s count = 2 (there are two zeros in list)

Examples
major_sum([1, 2, 3, 4, 0, 0, -3, -2]) ➞ 10

major_sum([-4, -8, -12, -3, 4, 7, 1, 3, 0, 0, 0, 0]) ➞ -27

major_sum([0, 0, 0, 0, 0, 1, 2, -3]) ➞ 5
# Because -3 < 1+2 < 0sCount = 5

'''                  
 

