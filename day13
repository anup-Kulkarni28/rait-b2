
'''
Create a class Smoothie and do the following:
•	Create an instance attribute called ingredients.
•	Create a get_cost method which calculates the total cost of the ingredients used to make the smoothie.
•	Create a get_price method which returns the number from get_cost plus the number from get_cost multiplied by 1.5. 
Round to two decimal places.
•	Create a get_name method which gets the ingredients and puts them in alphabetical order into a nice descriptive sentence. 
If there are multiple ingredients, add the word "Fusion" to the end but otherwise, add "Smoothie". Remember to change "-berries" to "-berry". 
See the examples below.
Ingredient	    Price
Strawberries	$1.50
Banana	        $0.50
Mango	        $2.50
Blueberries	    $1.00
Raspberries	    $1.00
Apple	        $1.75
Pineapple	    $3.50
Examples
s2 = Smoothie(["Raspberries", "Strawberries", "Blueberries"])

s2.ingredients ➞ ["Raspberries", "Strawberries", "Blueberries"]

s2.get_cost() ➞ "$3.50"

s2.get_price() ➞ "$8.75"

s2.get_name() ➞ "Blueberry Raspberry Strawberry Fusion"

'''

prices = {
    "Strawberries": "$1.50",
    "Banana": "$0.50",
    "Mango": "$2.50",
    "Blueberries": "$1.00",
    "Raspberries": "$1.00",
    "Apple": "$1.75",
    "Pineapple": "$3.50"
}

class Smoothie:
    def __init__(self,lst_items):
        self.ingredients=lst_items[:]

    def __get_cost__(self):
        return sum(float(prices[item][1:])for item in self.ingredients)

    def get_cost(self):
        return '${:.2f}'.format(self.__get_cost__())

    def get_price(self):
        return '${:.2f}'.format(round(self.__get_cost__()*2.5,2))

    def get_name(self):
        return (''.join(sorted(self.ingredients)).replace('berries','berry')+('Smoothie' if len(self.ingredients)==1 else 'Fusion'))

s=Smoothie(["Raspberries", "Strawberries", "Blueberries"])
print(s.ingredients)
print(s.get_cost())
print(s.get_price())
print(s.get_name())


'''
WeCare insurance company wants to calculate premium of vehicles.
Vehicles are of two types – "Two Wheeler" and "Four Wheeler". Each vehicle is identified by vehicle id, type, cost and premium amount.
Premium amount is 2% of the vehicle cost for two wheelers and 6% of the vehicle cost for four wheelers. 
Calculate the premium amount and display the vehicle details.
Identify the class name and attributes to represent vehicles. 
•	calculate_premium()
•	vehicle_cost
•	TwoWheeler
•	vehicle_type
•	vehicle_id
•	Vehicle
•	premium_amount
•	FourWheeler
•	calculate_vehicle_cost()
•	__init__()
•	display_vehicle_details()
Write a Python program to implement the class chosen with its attributes and methods.
Note:
1.	Consider all instance variables to be private and methods to be public
2.	Include getter and setter methods for all instance variables
3.	Display appropriate error message, if the vehicle type is invalid
4.	Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''

class Vehicle:
    def __init__(self):
        self.__vehicle_cost=None
        self.__vehicle_id=None
        self.__vehicle_type=None
        self.__premium_cost=None

    def set_vehicle_id(self,vehicle_id):
        self.__vehicle_id=vehicle_id

    def set_vehicle_type(self,vehicle_type):
        if check_type(vehicle_type):
            self.__vehicle_type=vehicle_type
        else:
            return "invalid vehicle type"

    def set_vehicle_cost(self,vehicle_cost):
        self.__vehicle_cost=vehicle_cost

    def get_vehicle_id(self):
        return self.__vehicle_id

    def get_vehicle_type(self):
        return self.__vehicle_type

    def get_vehicle_cost(self):
        return self.__vehicle_cost

    def get_premium_amount(self):
        return self.__premium_cost

    def calculate_premium(self):
        if self.__vehicle_type=="TwoWheeler":
            self.__premium_cost=self.__vehicle_cost*2/100
        elif self.__vehicle_type=="FourWheeler":
            self.__premium_cost=self.__vehicle_cost*6/100
        else:
            print("Invalid Vehicle Type")

    def display(self):
        print(self.__vehicle_type) 
        print(self.__vehicle_cost)
        print(self.__vehicle_id) 
        print(self.__premium_cost)


def check_type(type):
    vehicle_type=['TwoWheeler','FourWheeler']
    if type not in vehicle_type:
        return 0
    return 1

v=Vehicle()
v.set_vehicle_type('TwoWheeler')
v.set_vehicle_cost(105000)
v.set_vehicle_id(10)
v.calculate_premium()
v.display()
