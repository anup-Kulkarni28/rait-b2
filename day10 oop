'''
Mubashir needs to assemble a parcel of ordered chocolates. He got two types of chocolates:
•	Small chocolates (2 grams each)
•	Big chocolates (5 grams each)
Create a function that takes three parameters: Number of small available chocolates n_small, 
number of big chocolates available n_big and desired weight (in grams) of the final parcel order.
The function should return the required number of small chocolates to achieve the goal. 
The function should return -1 if the goal cannot be achieved by any possible combinations of small and big chocolates.

Examples
chocolates_parcel(4, 1, 13) ➞ 4
# 4 small chocolates = 8 grams
# 1 big chocolate = 5 grams
# 8 + 5 = 13 grams
# Required number of small chocolates = 4

chocolates_parcel(4, 1, 14) ➞ -1
# You can not make any combination to reach 14 grams.

chocolates_parcel(2, 1, 7) ➞ 1
# 1 big chocolate = 5 grams
# 1 small chocolates = 2 grams
# 5 + 2 = 7 grams
# Required number of small chocolates = 1
Notes
•	Maximize the use of big chocolates that are available to achieve the desired goal. 
And only then should you proceed to use the small chocolates.
•	You can't break chocolates into small pieces.

'''

def chocolates_parcel(n_small,n_big,weight):
    if 2*n_small + 5*n_big<weight:
        return -1
    if weight%5==0 and weight//5<=n_big:
        return 0
    big=0 if n_big==0 else min(n_big,weight//5)
    while big>0:
        small=(weight-5*big)//2
        if small<=n_small and 2*small+5*big==weight:
            return small
        big-=1
    if weight%2==0 and weight//2<=n_small:
        return weight//2
    return -1
print(chocolates_parcel(4,1,14))

#2

def chocolates_parcel(n_small,n_big,weight):
    result=0
    while weight%5!=0 or n_big*5<weight:
        weight-=2
        result+=1
    return result if weight>=0 and result <=n_small else -1

print(chocolates_parcel(4,1,13))



#oop
'''
•	A class is a user-defined blueprint or prototype from which objects are created.
•	Class Definition Syntax:
class ClassName:
# Statement-1
.
.
# Statement-N
•	An Object is an instance of a Class. 
•	self
Class methods must have an extra first parameter in the method definition. 
'''

class Python:   #class creation
    pass 

p1=Python()    #object creation  or instantiating a class
p2=Python()

#self

#constructors or init method
'''
•	__init__ method is used to initializing the object’s state.
•	Constructors are used to initializing the object’s state.
•	Types of constructors :
1.	default constructor 
2.	parameterized constructor 
'''

def __init__(self):
    pass


#destructors

'''
•	Destructors are called when an object gets destroyed. 
'''

def __del__(self):
    pass

#example
class Dog:
    animal="dog" #class variable 
    def __init__(self,breed,color):
        self.breed=breed  #instance variables 
        self.color=color

D1=Dog("Pug","brown")
D2=Dog("Bulldog","white")

print("d1 is:",D1.animal)
print("d1 is:",D1.breed)
print("d1 is:",D1.color)

print("d2 is:",D2.animal)
print("d2 is:",D2.breed)
print("d2 is:",D2.color)
